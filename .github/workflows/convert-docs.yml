name: Convert Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'components/**/**/Eco.Core1_EN.fodt'  # for tests purpose one file only
  workflow_dispatch:  # Allow manual triggering

jobs:
  convert-and-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For source repo
      id-token: write  # For GitHub App token

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Needed for git diff

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('**/convert-docs.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/convert-docs.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-



    - name: Install converters
      run: |
        sudo apt-get update
        sudo apt-get install pandoc libreoffice -y
        pip install pandoc frontmatter

    - name: Find changed files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          components/**/*.fodt

    - name: Convert to Markdown
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "=== CONVERSION START ==="
        echo "Found changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
        echo "Number of files to convert: $(echo '${{ steps.changed-files.outputs.all_changed_files }}' | wc -w)"
        
        # Export GitHub environment variables for the script
        echo "GITHUB_SERVER_URL=${{ github.server_url }}" >> $GITHUB_ENV
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV
        
        # Create converted_docs directory and list contents before conversion
        mkdir -p converted_docs
        echo "Contents before conversion:"
        ls -la converted_docs/ || echo "Directory is empty"
        
        # Call the external shell script with changed files as arguments
        bash .github/workflows/convert_docs.sh ${{ steps.changed-files.outputs.all_changed_files }}
        
    - name: List converted files
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "=== CONVERSION COMPLETE ==="
        echo "Files converted:"
        ls -la converted_docs/
        echo "Total .md files created: $(find converted_docs -name "*.md" | wc -l)"

    - name: Prepare SSH and clone docs repo
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        TARGET_REPO_SSH_KEY: ${{ secrets.VITEPRESS_DEPLOY_TOKEN }}
      shell: bash
      run: |
        set -euo pipefail
        echo "=== SSH SETUP AND CLONE START ==="
        mkdir -p ~/.ssh
        umask 077
        # Normalize CRLF -> LF and write key
        printf '%s\n' "$TARGET_REPO_SSH_KEY" | sed 's/\r$//' > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        # Basic diagnostics
        if ssh-keygen -lf ~/.ssh/deploy_key >/dev/null 2>&1; then
          echo "Key is parsable:"
          ssh-keygen -lf ~/.ssh/deploy_key || true
        else
          echo "ERROR: ssh-keygen could not parse the key. Dump first lines and CR bytes:"
          head -n 5 ~/.ssh/deploy_key | sed -n '1,5p'
          od -An -t x1 -c -w16 ~/.ssh/deploy_key | sed -n '1,10p' || true
          exit 1
        fi
        # Preload GitHub host keys
        ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts 2>/dev/null || true
        # Start agent and add key
        eval "$(ssh-agent -s)"
        if ! ssh-add ~/.ssh/deploy_key; then
          echo "ssh-add failed; printing key header for inspection:"
          head -n 2 ~/.ssh/deploy_key || true
          exit 1
        fi
        ssh-add -l || true
        # Clone target repo
        git clone git@github.com:peerf-eco/docs-vitepress.git docs-vitepress
        echo "=== SSH SETUP AND CLONE COMPLETE ==="

    - name: Copy converted files and push
      if: steps.changed-files.outputs.any_changed == 'true'
      shell: bash
      run: |
        set -euo pipefail
        echo "=== COPY AND PUSH START ==="
        ls -la converted_docs/ || { echo "No converted_docs directory"; exit 1; }
        targetDir="docs-vitepress/docs/components"
        mkdir -p "$targetDir"
        filesCopied=0
        while IFS= read -r file; do
          src="converted_docs/${file}"
          if [ -f "$src" ]; then
            cp "$src" "$targetDir/"
            echo "Copied: ${file}"
            filesCopied=$((filesCopied+1))
          fi
        done < <(ls converted_docs)
        echo "Total files copied: $filesCopied"
        echo "Files in target directory after copy:"
        ls -la "$targetDir" || true

        pushd docs-vitepress >/dev/null
        git config user.name "Docs CI Bot"
        git config user.email "docs-bot@ecoos.dev"
        git add docs/components/
        if ! git diff --staged --quiet; then
          sha="${GITHUB_SHA:-unknown-sha}"
          git commit -m "Auto-update docs from ${sha}"
          git push origin HEAD:main
          echo "Successfully pushed to docs-vitepress repository"
        else
          echo "No changes to commit - files may already be up to date"
        fi
        popd >/dev/null
        echo "=== COPY AND PUSH COMPLETE ==="
  
    - name: Generate and update components manifest
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        TARGET_REPO_SSH_KEY: ${{ secrets.VITEPRESS_DEPLOY_TOKEN }}
      shell: bash
      run: |
        set -euo pipefail
        echo "=== MANIFEST GENERATION START ==="
        # Reuse existing clone if present; otherwise clone fresh with robust SSH setup
        if [ ! -d "docs-vitepress/.git" ]; then
          echo "docs-vitepress not found, setting up SSH and cloning..."
          mkdir -p ~/.ssh
          umask 077
          printf '%s\n' "$TARGET_REPO_SSH_KEY" | sed 's/\r$//' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts 2>/dev/null || true
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key
          git clone git@github.com:peerf-eco/docs-vitepress.git docs-vitepress
        fi

        pushd docs-vitepress >/dev/null

        echo "Checking docs/components directory..."
        if [ -d "docs/components" ]; then
          echo "Files in docs/components:"
          find docs/components -name "*.md" | wc -l
          ls -la docs/components/ || true
        else
          echo "WARNING: docs/components directory not found!"
          mkdir -p docs/components
        fi

        echo "Installing dependencies..."
        npm ci || npm install

        echo "Generating components manifest..."
        npm run docs:generate-components

        if [ -f ".vitepress/components.json" ]; then
          echo "Manifest generated successfully:"
          if command -v jq >/dev/null 2>&1; then
            jq '.components | length' .vitepress/components.json || true
          else
            echo "jq not available; skipping pretty print"
          fi
        else
          echo "ERROR: Manifest file not generated!"
        fi

        git add .vitepress/components.json
        if ! git diff --quiet && ! git diff --staged --quiet; then
          echo "Changes detected in manifest, committing..."
          git config user.name "Docs CI Bot"
          git config user.email "docs-bot@ecoos.dev"
          git commit -m "Auto-update components manifest"
          git push origin 'HEAD:main'
          echo "Manifest pushed successfully"
        else
          echo "No changes in manifest to commit"
        fi

        popd >/dev/null
        echo "=== MANIFEST GENERATION COMPLETE ==="
