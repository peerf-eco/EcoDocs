name: Convert Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/components/**/**/Eco.Core1_EN.fodt'  # for tests purpose one file only

jobs:
  convert-and-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For source repo
      id-token: write  # For GitHub App token

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Needed for git diff

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install converters
      run: |
        sudo apt-get install pandoc -y
        pip install pandoc frontmatter

    - name: Find changed files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          docs/components/**/*.fodt

    - name: Convert to Markdown
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        mkdir -p converted_docs
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          base="${file%.*}"
          pandoc "$file" -f odt -t markdown -o "converted_docs/${base##*/}.md"
          # Add frontmatter
          python -c "
import frontmatter
post = frontmatter.load('converted_docs/${base##*/}.md')
post.metadata.update({
    'title': '${base##*/}'.replace('_', ' ').title(),
    'layout': 'component',
    'source': '${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/$file'
})
with open('converted_docs/${base##*/}.md', 'wb') as f:
    frontmatter.dump(post, f)
"
        done

    - name: Push to Docs Repo
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v6
      env:
        DOCS_REPO_TOKEN: ${{ secrets.DOCS_REPO_DEPLOY_TOKEN }}
      with:
        script: |
          const { execSync } = require('child_process')
          const fs = require('fs')
          
          try {
            // Clone docs repo
            execSync('git clone https://x-access-token:${{ secrets.DOCS_REPO_TOKEN }}@github.com/peerf-eco/docs-vitepress.git')
            
            // Copy converted files
            const files = fs.readdirSync('converted_docs')
            files.forEach(file => {
              fs.copyFileSync(
                `converted_docs/${file}`,
                `docs-vitepress/docs/components/${file}`
              )
            })
            
            // Commit and push
            process.chdir('docs-vitepress')
            execSync('git config --global user.name "Docs CI Bot"')
            execSync('git config --global user.email "docs-bot@ecoos.dev"')
            execSync('git add docs/components/')
            execSync('git diff --quiet && git diff --staged --quiet || git commit -m "Auto-update docs from ${{ github.sha }}"')
            execSync('git push origin main')
          } catch (error) {
            core.setFailed(`Failed to update docs: ${error.message}`)
          }
  
    - name: Generate and update components manifest
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        # Clone docs-itepress repo again in a separate directory for manifest generation
        git clone https://x-access-token:${{ secrets.DOCS_REPO_TOKEN }}@github.com/peerf-eco/docs-vitepress.git manifest-gen-repo
    cd manifest-gen-repo
    
        # Install dependencies and generate manifest
        npm install
        npm run docs:generate-components
    
        # Commit and push if manifest changed
        git add .vitepress/components.json
        git diff --quiet && git diff --staged --quiet || (git commit -m "Auto-update components manifest" && git push origin main)
