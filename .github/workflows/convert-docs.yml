name: Convert Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'components/**/**/Eco.Core1_EN.fodt'  # for tests purpose one file only
  workflow_dispatch:  # Allow manual triggering

jobs:
  convert-and-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For source repo
      id-token: write  # For GitHub App token

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Needed for git diff

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('**/convert-docs.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/convert-docs.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-



    - name: Install converters
      run: |
        sudo apt-get update
        sudo apt-get install pandoc libreoffice -y
        pip install pandoc frontmatter

    - name: Find changed files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          components/**/*.fodt

    - name: Convert to Markdown
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "=== CONVERSION START ==="
        echo "Found changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
        echo "Number of files to convert: $(echo '${{ steps.changed-files.outputs.all_changed_files }}' | wc -w)"
        
        # Export GitHub environment variables for the script
        echo "GITHUB_SERVER_URL=${{ github.server_url }}" >> $GITHUB_ENV
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV
        
        # Create converted_docs directory and list contents before conversion
        mkdir -p converted_docs
        echo "Contents before conversion:"
        ls -la converted_docs/ || echo "Directory is empty"
        
        # Call the external shell script with changed files as arguments
        bash .github/workflows/convert_docs.sh ${{ steps.changed-files.outputs.all_changed_files }}
        
    - name: List converted files
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "=== CONVERSION COMPLETE ==="
        echo "Files converted:"
        ls -la converted_docs/
        echo "Total .md files created: $(find converted_docs -name "*.md" | wc -l)"

    - name: Push to Docs Repo
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v6
      env:
        TARGET_REPO_TOKEN: ${{ secrets.VITEPRESS_DEPLOY_TOKEN }}
      with:
        script: |
          const cp = require('child_process')
          const fs = require('fs')
          const path = require('path')
          
          function run(cmd, args = [], opts = {}) {
            const result = cp.spawnSync(cmd, args, { stdio: 'inherit', ...opts })
            if (result.status !== 0) {
              throw new Error(`${cmd} ${args.join(' ')} exited with code ${result.status}`)
            }
          }
          
          try {
            console.log('=== PUSH TO DOCS REPO START ===')
            
            // List files to be pushed
            const filesToPush = fs.readdirSync('converted_docs')
            console.log(`Files to push: ${filesToPush.length}`)
            filesToPush.forEach(file => console.log(`  - ${file}`))

            // Prepare SSH key
            const sshKey = process.env.TARGET_REPO_SSH_KEY || ''
            if (!sshKey) {
              throw new Error('TARGET_REPO_SSH_KEY is empty')
            }
            
            // Start SSH agent and add the key
            run('eval', ['ssh-agent', '-s']);
            run('ssh-add', ['-', { input: sshKey }]);  // Use heredoc to add the SSH key
            
            // Build remote URL for SSH
            const remoteUrl = 'git@github.com:peerf-eco/docs-vitepress.git';
            run('git', ['clone', remoteUrl, 'docs-vitepress'])
            
            // Prepare token and safe URL
            // const rawToken = process.env.TARGET_REPO_TOKEN || ''
            // Remove CR/LF and any accidental surrounding quotes, spaces
            // const token = rawToken.replace(/[\r\n"' ]+/g, '')
            // if (!token) {
            //   throw new Error('TARGET_REPO_TOKEN is empty')
            // }
            console.log(`Key length: ${sshKey.length}`)
            
            // Build remote URL explicitly with correct username "x-access-token"
            // console.log('Cloning docs repository with token-in-URL...')
            // const remoteUrl = `https://x-access-token:${encodeURIComponent(token)}@github.com/peerf-eco/docs-vitepress.git`
            // run('git', ['clone', remoteUrl, 'docs-vitepress'])
            
            // Ensure target directory exists
            const targetDir = path.join('docs-vitepress', 'docs', 'components')
            if (!fs.existsSync(targetDir)) {
              console.log(`Creating target directory: ${targetDir}`)
              fs.mkdirSync(targetDir, { recursive: true })
            }
            
            // Copy converted files
            let filesCopied = 0
            filesToPush.forEach(file => {
              const sourcePath = path.join('converted_docs', file)
              const targetPath = path.join(targetDir, file)
              if (fs.existsSync(sourcePath)) {
                fs.copyFileSync(sourcePath, targetPath)
                console.log(`Copied: ${file}`)
                filesCopied++
              } else {
                console.log(`Warning: Source file not found: ${sourcePath}`)
              }
            })
            console.log(`Total files copied: ${filesCopied}`)
            
            // List files in target directory after copy
            const targetFiles = fs.readdirSync(targetDir)
            console.log(`Files in target directory: ${targetFiles.length}`)
            targetFiles.forEach(file => console.log(`  - ${file}`))
            
            // Commit and push starting
            console.log('Committing and pushing changes...')
            process.chdir('docs-vitepress')
            
            // Remove any conflicting auth headers from the original checkout
            // console.log('Cleaning up authentication headers...')
            // try { run('git', ['config', '--unset-all', 'http.https://github.com/.extraheader']) } catch (e) {}
            
            // Configure git locally for the push
            run('git', ['config', 'user.name', 'Docs CI Bot'])
            run('git', ['config', 'user.email', 'docs-bot@ecoos.dev'])
            run('git', ['add', 'docs/components/'])
            
            // Check if there are changes to commit
            const diff = cp.spawnSync('git', ['diff', '--staged', '--name-only'], { encoding: 'utf8' })
            const hasChanges = (diff.stdout || '').trim()
            if (hasChanges) {
              console.log(`Changes detected: ${hasChanges.split('\n').length} files`)
              const sha = process.env.GITHUB_SHA || 'unknown-sha'
              run('git', ['commit', '-m', `Auto-update docs from ${sha}`])
              
              // Use token URL for push as well to avoid relying on stored credentials
              // const pushUrl = `https://x-access-token:${encodeURIComponent(token)}@github.com/peerf-eco/docs-vitepress.git`

              // Push using SSH
              run('git', ['push', 'origin', 'HEAD:main'])
              console.log('Successfully pushed to docs-vitepress repository')
            } else {
              console.log('No changes to commit - files may already be up to date')
            }
            
            console.log('=== PUSH TO DOCS REPO COMPLETE ===')
          } catch (error) {
            console.error('Error in push process:', error && error.message ? error.message : String(error))
            core.setFailed(`Failed to update docs: ${error && error.message ? error.message : String(error)}`)
          }
  
    - name: Generate and update components manifest
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        TARGET_REPO_TOKEN: ${{ secrets.VITEPRESS_DEPLOY_TOKEN }}
      run: |
        echo "=== MANIFEST GENERATION START ==="
        
        # Clone docs-vitepress repo again in a separate directory for manifest generation
        echo "Cloning docs-vitepress for manifest generation..."

        # Prepare SSH key
        const sshKey = process.env.TARGET_REPO_SSH_KEY || ''
        if (!sshKey) {
          throw new Error('TARGET_REPO_SSH_KEY is empty')
        }
        
        # Start SSH agent and add the key
        echo "ssa-agent initializing..."
        eval $(ssh-agent -s)
        ssh-add - <<< "${sshKey}"  // Use heredoc to add the SSH key
        echo "ssa-agent is initialized; deploy with key length: ${ssKey}"

        
        
        # Clone using token in URL (quote to avoid word-splitting). Use correct username "x-access-token"
        # git clone "https://x-access-token:${TOKEN}@github.com/peerf-eco/docs-vitepress.git" "manifest-gen-repo"
        
        cd manifest-gen-repo
        
        # Remove any conflicting auth headers
        # echo "Cleaning up authentication headers..."
        # git config --unset-all http.https://github.com/.extraheader || true
        
        # Check if docs/components directory exists
        echo "Checking docs/components directory..."
        if [ -d "docs/components" ]; then
          echo "Files in docs/components:"
          find docs/components -name "*.md" | wc -l
          ls -la docs/components/ || true
        else
          echo "WARNING: docs/components directory not found!"
          mkdir -p docs/components
        fi
    
        # Install dependencies and generate manifest
        echo "Installing dependencies..."
        npm install
        
        echo "Generating components manifest..."
        npm run docs:generate-components
        
        # Check if manifest was generated
        if [ -f ".vitepress/components.json" ]; then
          echo "Manifest generated successfully:"
          (command -v jq >/dev/null 2>&1 && cat .vitepress/components.json | jq '.components | length') || echo "Manifest exists"
        else
          echo "ERROR: Manifest file not generated!"
        fi
    
        # Commit and push if manifest changed
        git add .vitepress/components.json
        if ! git diff --quiet && ! git diff --staged --quiet; then
          echo "Changes detected in manifest, committing..."
          git commit -m "Auto-update components manifest"
          # Push using token URL to avoid relying on stored credentials
          # git push "https://x-access-token:${TOKEN}@github.com/peerf-eco/docs-vitepress.git" "HEAD:main"
          git push origin 'HEAD:main'
          echo "Manifest pushed successfully"
        else
          echo "No changes in manifest to commit"
        fi
        
        echo "=== MANIFEST GENERATION COMPLETE ==="
