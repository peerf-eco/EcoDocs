name: Convert Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'components/**/**/Eco.Core1_EN.fodt'  # for tests purpose one file only
  workflow_dispatch:  # Allow manual triggering

jobs:
  convert-and-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For source repo
      id-token: write  # For GitHub App token

    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Needed for git diff

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('**/convert-docs.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/convert-docs.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-



    - name: Install converters
      run: |
        sudo apt-get update
        sudo apt-get install pandoc libreoffice -y
        pip install pandoc frontmatter

    - name: Find changed files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          components/**/*.fodt

    - name: Convert to Markdown
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "=== CONVERSION START ==="
        echo "Found changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
        echo "Number of files to convert: $(echo '${{ steps.changed-files.outputs.all_changed_files }}' | wc -w)"
        
        # Export GitHub environment variables for the script
        echo "GITHUB_SERVER_URL=${{ github.server_url }}" >> $GITHUB_ENV
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV
        
        # Create converted_docs directory and list contents before conversion
        mkdir -p converted_docs
        echo "Contents before conversion:"
        ls -la converted_docs/ || echo "Directory is empty"
        
        # Call the external shell script with changed files as arguments
        bash .github/workflows/convert_docs.sh ${{ steps.changed-files.outputs.all_changed_files }}
        
    - name: List converted files
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "=== CONVERSION COMPLETE ==="
        echo "Files converted:"
        ls -la converted_docs/
        echo "Total .md files created: $(find converted_docs -name "*.md" | wc -l)"

    - name: Clone, copy files, and push to docs repo
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        TARGET_REPO_SSH_KEY: ${{ secrets.VITEPRESS_DEPLOY_TOKEN }}
      shell: bash
      run: |
        set -euo pipefail
        echo "=== SSH SETUP, CLONE, AND PUSH START ==="
        
        # Setup SSH
        mkdir -p ~/.ssh
        ssh-keyscan -t ed25519,rsa github.com >> ~/.ssh/known_hosts
        eval "$(ssh-agent -s)"
        ssh-add - <<< "$TARGET_REPO_SSH_KEY"
        
        # Clone and copy files
        git clone git@github.com:peerf-eco/docs-vitepress.git docs-vitepress
        
        ls -la converted_docs/ || { echo "No converted_docs directory"; exit 1; }
        targetDir="docs-vitepress/docs/components"
        mkdir -p "$targetDir"
        filesCopied=0
        while IFS= read -r file; do
          src="converted_docs/${file}"
          if [ -f "$src" ]; then
            cp "$src" "$targetDir/"
            echo "Copied: ${file}"
            filesCopied=$((filesCopied+1))
          fi
        done < <(ls converted_docs)
        echo "Total files copied: $filesCopied"
        
        # Push changes
        pushd docs-vitepress >/dev/null
        git config user.name "Docs CI Bot"
        git config user.email "docs-bot@ecoos.dev"
        git add docs/components/
        if ! git diff --staged --quiet; then
          sha="${GITHUB_SHA:-unknown-sha}"
          git commit -m "Auto-update docs from ${sha}"
          git push origin HEAD:main
          echo "Successfully pushed to docs-vitepress repository"
        else
          echo "No changes to commit - files may already be up to date"
        fi
        popd >/dev/null
        echo "=== OPERATION COMPLETE ==="
  
    - name: Generate and update components manifest
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        TARGET_REPO_SSH_KEY: ${{ secrets.VITEPRESS_DEPLOY_TOKEN }}
      shell: bash
      run: |
        set -eo pipefail
        echo "=== MANIFEST GENERATION START ==="
        
        pushd docs-vitepress >/dev/null
        
        # Check if package.json exists and is valid
        if [ ! -f "package.json" ]; then
          echo "No package.json found, skipping manifest generation"
          popd >/dev/null
          exit 0
        fi
        
        # Validate JSON syntax
        if ! python3 -m json.tool package.json >/dev/null 2>&1; then
          echo "Invalid package.json syntax, skipping manifest generation"
          popd >/dev/null
          exit 0
        fi
        
        # Check if the required script exists
        if ! grep -q '"docs:generate-components"' package.json; then
          echo "docs:generate-components script not found, skipping manifest generation"
          popd >/dev/null
          exit 0
        fi
        
        echo "Installing dependencies..."
        if ! npm ci 2>/dev/null && ! npm install 2>/dev/null; then
          echo "Failed to install dependencies, skipping manifest generation"
          popd >/dev/null
          exit 0
        fi
        
        echo "Generating components manifest..."
        if ! npm run docs:generate-components; then
          echo "Failed to generate manifest, continuing without it"
          popd >/dev/null
          exit 0
        fi
        
        # Setup SSH and push if manifest was generated
        if [ -f ".vitepress/components.json" ]; then
          mkdir -p ~/.ssh
          ssh-keyscan -t ed25519,rsa github.com >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add - <<< "$TARGET_REPO_SSH_KEY"
          
          git add .vitepress/components.json
          if ! git diff --staged --quiet; then
            echo "Committing manifest changes..."
            git config user.name "Docs CI Bot"
            git config user.email "docs-bot@ecoos.dev"
            git commit -m "Auto-update components manifest from ${GITHUB_SHA:-unknown-sha}"
            git push origin HEAD:main
            echo "Successfully pushed manifest update"
          else
            echo "No manifest changes to commit"
          fi
        fi
        
        popd >/dev/null
        echo "=== MANIFEST GENERATION COMPLETE ==="
